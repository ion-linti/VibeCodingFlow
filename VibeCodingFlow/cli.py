import typer
import asyncio
import subprocess
from pathlib import Path

from .services.memory import init_db, register_project, get_project_path, save_spec, log_history
from .services.promptifier import build_spec
from .services.architect import enrich_spec
from .services.updater import get_last_spec, diff_specs
from .services.codegen import generate_project, generate_files

app = typer.Typer()
init_db()

@app.command()
def new(
    name: str = typer.Argument(..., help="–ò–º—è –ø—Ä–æ–µ–∫—Ç–∞ (–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è)"),
    request: str = typer.Argument(..., help="–ù–∞—á–∞–ª—å–Ω–æ–µ NL-–æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞")
):
    """–°–æ–∑–¥–∞—Ç—å –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç."""
    project_dir = Path.cwd() / name
    typer.echo(f"üìÅ Creating project directory: {project_dir}")
    project_dir.mkdir(exist_ok=True)
    pid = register_project(name, str(project_dir))

    async def main():
        typer.echo("üîç Building spec...")
        spec = await build_spec(request)
        typer.echo("‚úÖ Spec built.")

        typer.echo("üìê Enriching structure...")
        full = await enrich_spec(spec)
        typer.echo("‚úÖ Spec enriched.")

        from .services import codegen
        codegen.PROJECT_ROOT = project_dir
        typer.echo("‚öôÔ∏è Generating code...")
        await generate_project(full)
        typer.echo(f"‚úÖ Project '{name}' generated in {project_dir}")

        save_spec(pid, full)
        log_history(pid, 'new', {'request': request, 'changed': list(full.get('project_structure', {}).keys())})

    asyncio.run(main())

@app.command()
def go(
    name: str = typer.Argument(..., help="–ò–º—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞")
):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–µ–∫—Ç–∞."""
    path = get_project_path(name)
    if not path:
        typer.echo(f"‚ùå No such project: {name}")
        raise typer.Exit(1)
    typer.echo(f"Run: cd {path}")

@app.command()
def do(
    request: str = typer.Argument(..., help="NL-–æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–¥–∞ –≤ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ–µ–∫—Ç–µ")
):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –∑–∞–ø–∏—Å–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é."""
    project = Path.cwd().name
    path = get_project_path(project)
    if not path:
        typer.echo(f"‚ùå Unknown project: {project}. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —á–µ—Ä–µ–∑ 'vibe new'.")
        raise typer.Exit(1)
    pid = register_project(project, path)

    async def main():
        typer.echo("üîç Building spec...")
        spec = await build_spec(request)
        typer.echo("‚úÖ Spec built.")

        typer.echo("üìê Enriching structure...")
        full = await enrich_spec(spec)
        typer.echo("‚úÖ Spec enriched.")

        old = get_last_spec(project)
        changed = diff_specs(old, full)
        if not changed:
            typer.echo("‚ùì Nothing to change.")
            return

        from .services import codegen
        codegen.PROJECT_ROOT = Path(path)
        typer.echo(f"üõ†Ô∏è Applying changes to {len(changed)} file(s)...")
        await generate_files(full, changed)
        typer.echo("‚úÖ Changes applied.")

        save_spec(pid, full)
        log_history(pid, 'do', {'request': request, 'changed': changed})

        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è tests
        tests_dir = Path(path) / "tests"
        if tests_dir.exists():
            typer.echo("üèÉ Running tests...")
            result = subprocess.run(["pytest", "--maxfail=1", "--disable-warnings"], cwd=path)
            if result.returncode == 0:
                typer.echo("‚úÖ All tests passed!")
            else:
                typer.echo("‚ö†Ô∏è Tests failed. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ 'vibe do' –∑–∞–Ω–æ–≤–æ —Å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º.")
        else:
            typer.echo("‚ö†Ô∏è No tests found, skipping test run.")

    asyncio.run(main())

if __name__ == '__main__':
    app()
